<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ssm.dao.StudentDao">
    <!--映射student对象的resultMap-->
    <resultMap id="studentResultMap" type="ssm.domain.Student">
        <id property="studentId" column="studentId"/>
        <result property="username" column="username"/>
        <result property="phone" column="phone"/>
        <result property="email" column="email"/>
        <result property="address" column="address"/>
        <result property="note" column="note"/>
        <result property="level" column="level"/>
        <result property="sex" column="sex"/>
        <result property="birthday" column="birthday"/>
        <result property="classId" column="stu_classId"/>
        <result property="dormitoryId" column="stu_dormitoryId"/>

        <association property="dclass" javaType="ssm.domain.DClass">
            <id property="classId" column="classId"/>
            <result property="className" column="className"/>
        </association>
        <association property="dormitory" javaType="ssm.domain.Dormitory">
            <id property="dormitoryId" column="dormitoryId"/>
            <result property="dormitoryNumber" column="dormitoryNumber"/>
        </association>
    </resultMap>




    <select id="getAllStudentList" resultMap="studentResultMap"
            parameterType="ssm.domain.StudentSearch">
        select
        student.studentId,
        student.username,
        student.address,
        student.birthday,
        student.email,
        student.phone,
        student.sex,
        student.level,
        student.note,
        student.dormitoryId as stu_dormitoryId,
        student.classId as stu_classId,

        class.className,
        class.classId,

        dormitory.dormitoryNumber,
        dormitory.dormitoryId

        from student ,class ,dormitory
        <trim prefix="where" prefixOverrides="and|or">
            student.classId=class.classId and student.dormitoryId=dormitory.dormitoryId
            <if test="null != username and '' != username">
                and username like  "%"#{username}"%"
            </if>
            <if test="null != sex and -1 != sex">
                and sex = #{sex}
            </if>
            <if test="null != classId and ''!= classId">
                <!--注意这里当没有选择班级的时候 传过来的是空
                所以如果没有''!= classId 那么比如只选择性别的时候 也会执行
                and student.classId = #{classId}  但是tb_student.classId为空 当然没有数据了-->
                and student.classId = #{classId}
            </if>
            <if test="null != dormitoryId and '' != dormitoryId">
                and student.dormitoryId = #{dormitoryId}
            </if>


            <if test="null != birthdayStart and null != birthdayEnd and '' != birthdayStart and '' != birthdayEnd">
                and birthday between #{birthdayStart} and #{birthdayEnd}
            </if>
            <if test="'' != birthdayStart and '' == birthdayEnd">
                and birthday between #{birthdayStart} and curtime()
            </if>
            <if test="'' == birthdayStart and '' != birthdayEnd">
                and birthday between '1900-01-01' and #{birthdayEnd}
            </if>
        </trim>

        order by studentId

    </select>

    <select id="getStudentBySIdAndDId" resultType="ssm.domain.Student">
        select * from student where studentId=#{studentId} and dormitoryId=#{dormitoryId}
    </select>


    <select id="getAllStudent" resultType="ssm.domain.Student">
        select * from student
    </select>


    <select id="getStudentByStudentname" resultType="ssm.domain.Student">
        select * from student where username=#{username}
    </select>

    <insert id="addStudent" parameterType="ssm.domain.Student">
        insert into student
                (username,sex,birthday,classId,dormitoryId,phone,address,email,level,note)
        values (#{username},#{sex},#{birthday},#{classId},#{dormitoryId},#{phone},#{address},
                #{email},#{level},#{note})

    </insert>

    <select id="getStudentByClassId" resultMap="studentResultMap" >
        select * from student where classId=#{classId}
    </select>

    <select id="getStudentByDormitoryId" resultMap="studentResultMap">
        select * from student where dormitoryId=#{dormitoryId}
    </select>

    <delete id="deleteStudentById">
        delete from student where studentId=#{studentId}
    </delete>

    <select id="getStudentById" resultType="ssm.domain.Student">
        select * from student where studentId=#{studentId}
    </select>

    <update id="updateStudent" parameterType="ssm.domain.Student">
        update student
        <set>

            <if test="username != null">
                username = #{username},
            </if>

            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="birthday != null">
                birthday = #{birthday},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
            <if test="note != null">
                note = #{note},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="level != null">
                level = #{level},
            </if>
            <if test="classId != null">
                classId = #{classId},
            </if>
            <if test="dormitoryId != null">
                dormitoryId = #{dormitoryId},
            </if>

        </set>
        where studentId = #{studentId}
    </update>

</mapper>